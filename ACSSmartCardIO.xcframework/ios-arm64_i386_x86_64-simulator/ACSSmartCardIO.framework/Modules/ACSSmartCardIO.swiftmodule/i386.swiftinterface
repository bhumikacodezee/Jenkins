// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ACSSmartCardIO
@_exported import ACSSmartCardIO
import CoreBluetooth
import Foundation
import Security
import SmartCardIO
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers final public class TransmitOptions {
  public static var t0GetResponse: Swift.Bool
  public static var t1GetResponse: Swift.Bool
  public static var t1StripLe: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BluetoothSmartCard {
  public static let shared: ACSSmartCardIO.BluetoothSmartCard
  final public let manager: ACSSmartCardIO.BluetoothTerminalManager
  final public let factory: SmartCardIO.TerminalFactory
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerminalTimeouts {
  public static var defaultTimeout: Swift.Int
  public var connectionTimeout: Swift.Int
  public var powerTimeout: Swift.Int
  public var protocolTimeout: Swift.Int
  public var apduTimeout: Swift.Int
  public var controlTimeout: Swift.Int
  @objc deinit
}
final public class BluetoothFactorySpi : SmartCardIO.TerminalFactorySpi {
  public init(parameter: Any) throws
  final public func engineTerminals() -> SmartCardIO.CardTerminals
  @objc deinit
}
final public class AcsBluetooth : SmartCardIO.Provider {
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BluetoothTerminalManager : ObjectiveC.NSObject {
  public enum TerminalType {
    case none
    case acr3901us1
    case acr1255uj1
    case amr220c
    case acr1255uj1v2
    public static func == (a: ACSSmartCardIO.BluetoothTerminalManager.TerminalType, b: ACSSmartCardIO.BluetoothTerminalManager.TerminalType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let ioctlEscape: Swift.Int
  public enum BatteryStatus {
    case notSupported
    case none
    case low
    case full
    case usbPlugged
    public static func == (a: ACSSmartCardIO.BluetoothTerminalManager.BatteryStatus, b: ACSSmartCardIO.BluetoothTerminalManager.BatteryStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DeviceInfoType : Swift.Int {
    case systemId
    case modelNumberString
    case serialNumberString
    case firmwareRevisionString
    case hardwareRevisionString
    case softwareRevisionString
    case manufacturerNameString
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var delegate: ACSSmartCardIO.BluetoothTerminalManagerDelegate?
  public var centralManager: CoreBluetooth.CBCentralManager! {
    get
  }
  public func startScan(terminalType: ACSSmartCardIO.BluetoothTerminalManager.TerminalType)
  public func stopScan()
  public func timeouts(terminal: SmartCardIO.CardTerminal) throws -> ACSSmartCardIO.TerminalTimeouts
  public func setMasterKey(terminal: SmartCardIO.CardTerminal, masterKey: [Swift.UInt8]?) throws
  public func terminalType(terminal: SmartCardIO.CardTerminal) throws -> ACSSmartCardIO.BluetoothTerminalManager.TerminalType
  public func batteryStatus(terminal: SmartCardIO.CardTerminal, timeout: Swift.Int) throws -> ACSSmartCardIO.BluetoothTerminalManager.BatteryStatus
  public func batteryLevel(terminal: SmartCardIO.CardTerminal, timeout: Swift.Int) throws -> Swift.Int
  public func deviceInfo(terminal: SmartCardIO.CardTerminal, type: ACSSmartCardIO.BluetoothTerminalManager.DeviceInfoType, timeout: Swift.Int) throws -> Swift.String?
  public func disconnect(terminal: SmartCardIO.CardTerminal) throws
  @objc deinit
}
extension ACSSmartCardIO.BluetoothTerminalManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
public protocol BluetoothTerminalManagerDelegate {
  func bluetoothTerminalManagerDidUpdateState(_ manager: ACSSmartCardIO.BluetoothTerminalManager)
  func bluetoothTerminalManager(_ manager: ACSSmartCardIO.BluetoothTerminalManager, didDiscover terminal: SmartCardIO.CardTerminal)
}
@_hasMissingDesignatedInitializers public class Amr220cConstants {
  public static let ioctlEmv: Swift.Int
  @objc deinit
}
extension ACSSmartCardIO.BluetoothTerminalManager.TerminalType : Swift.Equatable {}
extension ACSSmartCardIO.BluetoothTerminalManager.TerminalType : Swift.Hashable {}
extension ACSSmartCardIO.BluetoothTerminalManager.BatteryStatus : Swift.Equatable {}
extension ACSSmartCardIO.BluetoothTerminalManager.BatteryStatus : Swift.Hashable {}
extension ACSSmartCardIO.BluetoothTerminalManager.DeviceInfoType : Swift.Equatable {}
extension ACSSmartCardIO.BluetoothTerminalManager.DeviceInfoType : Swift.Hashable {}
extension ACSSmartCardIO.BluetoothTerminalManager.DeviceInfoType : Swift.RawRepresentable {}
